package edu.berkeley.cs186.database.query;

import edu.berkeley.cs186.database.Database;
import edu.berkeley.cs186.database.DatabaseException;
import edu.berkeley.cs186.database.databox.DataBox;
import edu.berkeley.cs186.database.io.Page;
import edu.berkeley.cs186.database.table.Record;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;

public class PNLJOperator extends JoinOperator {

  public PNLJOperator(QueryOperator leftSource,
                      QueryOperator rightSource,
                      String leftColumnName,
                      String rightColumnName,
                      Database.Transaction transaction) throws QueryPlanException, DatabaseException {
    super(leftSource,
          rightSource,
          leftColumnName,
          rightColumnName,
          transaction,
          JoinType.PNLJ);
  }

  public Iterator<Record> iterator() throws QueryPlanException, DatabaseException {
    return new PNLJIterator();
  }

  /**
   * An implementation of Iterator that provides an iterator interface for this operator.
   */
  private class PNLJIterator implements Iterator<Record> {
    /* TODO: Implement the PNLJIterator */
    /* Suggested Fields */
    private String leftTableName;
    private String rightTableName;
    private Iterator<Page> leftIterator;
    private Iterator<Page> rightIterator;
    private Record leftRecord;
    private Record nextRecord;
    private Record rightRecord;
    private Page leftPage;
    private Page rightPage;
    private byte[] leftHeader;
    private byte[] rightHeader;
    private int leftEntryNum;
    private int rightEntryNum;

    public PNLJIterator() throws QueryPlanException, DatabaseException {
      /* Suggested Starter Code: get table names. */
      if (PNLJOperator.this.getLeftSource().isSequentialScan()) {
        this.leftTableName = ((SequentialScanOperator) PNLJOperator.this.getLeftSource()).getTableName();
      } else {
        this.leftTableName = "Temp" + PNLJOperator.this.getJoinType().toString() + "Operator" + PNLJOperator.this.getLeftColumnName() + "Left";
        PNLJOperator.this.createTempTable(PNLJOperator.this.getLeftSource().getOutputSchema(), leftTableName);
        Iterator<Record> leftIter = PNLJOperator.this.getLeftSource().iterator();
        while (leftIter.hasNext()) {
          PNLJOperator.this.addRecord(leftTableName, leftIter.next().getValues());
        }
      }
      if (PNLJOperator.this.getRightSource().isSequentialScan()) {
        this.rightTableName = ((SequentialScanOperator) PNLJOperator.this.getRightSource()).getTableName();
      } else {
        this.rightTableName = "Temp" + PNLJOperator.this.getJoinType().toString() + "Operator" + PNLJOperator.this.getRightColumnName() + "Right";
        PNLJOperator.this.createTempTable(PNLJOperator.this.getRightSource().getOutputSchema(), rightTableName);
        Iterator<Record> rightIter = PNLJOperator.this.getRightSource().iterator();
        while (rightIter.hasNext()) {
          PNLJOperator.this.addRecord(rightTableName, rightIter.next().getValues());
        }
      }
      /* TODO */
      this.leftIterator = PNLJOperator.this.getPageIterator(leftTableName);
      this.rightIterator = PNLJOperator.this.getPageIterator(rightTableName);
      this.leftRecord = null;
      this.rightRecord = null;
      this.nextRecord = null;
      this.leftPage = null;
      this.rightPage = null;
      this.leftHeader = null;
      this.rightHeader = null;
      this.leftEntryNum = 0;
      this.rightEntryNum = 0;
    }

    public boolean hasNext() {
      /* TODO */
      if (nextRecord != null) {
        return true;
      }
      //some sheet
      while (true) {
        if (this.leftRecord == null) {
          this.leftRecord = getNextLeftRecordInPage();
          if (this.leftIterator.hasNext()) { //if there is a new left page
            this.leftEntryNum = 0;
            this.leftPage = this.leftIterator.next();
          }
          return false;
        }
        Record rightRecord = getNextRightRecordInPage();
        while (rightRecord != null) {
          DataBox leftJoinValue = this.leftRecord.getValues().get(PNLJOperator.this.getLeftColumnIndex());
          DataBox rightJoinValue = rightRecord.getValues().get(PNLJOperator.this.getRightColumnIndex());
          if (leftJoinValue.equals(rightJoinValue)) {
            List<DataBox> leftValues = new ArrayList<DataBox>(this.leftRecord.getValues());
            List<DataBox> rightValues = new ArrayList<DataBox>(rightRecord.getValues());
            leftValues.addAll(rightValues);
            this.nextRecord = new Record(leftValues);
            return true;
          }
        }
        this.leftRecord = null;
      }
    }

    private Record getNextLeftRecordInPage() {
      /* TODO */
      //assume page is loaded in
      //while there is no entry in this slot
      try {
        while (leftHeader[leftEntryNum] != 1) {
          leftEntryNum++;
          if (leftEntryNum > getHeaderSize(leftTableName)) {
            return null;
          }
        }
        int entrysize = getEntrySize(leftTableName);
        return getSchema(leftTableName).decode(leftPage.readBytes(entrysize * leftEntryNum + getHeaderSize(leftTableName), entrysize));
      } catch (DatabaseException e) {}
      return null;
    }

    private Record getNextRightRecordInPage() {
      /* TODO */
      try {
        //loads in left pg
        if (rightPage == null || rightPage.getPageNum() == 0) {
          if (rightIterator.hasNext()) {
            rightPage = rightIterator.next();
            rightHeader = PNLJOperator.this.getPageHeader(rightTableName, rightPage);
          } else return null;
        }
        //while there is no entry in this slot
        while (rightHeader[rightEntryNum] != 1)
          if (rightEntryNum > getHeaderSize(rightTableName)) {
            rightEntryNum = 0;
            //load in next pg
            if (rightIterator.hasNext()) {
              rightPage = rightIterator.next();
              rightHeader = PNLJOperator.this.getPageHeader(rightTableName, rightPage);
            } else return null;
          }

        int entrysize = getEntrySize(rightTableName);
        return getSchema(rightTableName).decode(rightPage.readBytes(entrysize*rightEntryNum + getHeaderSize(rightTableName), entrysize));
      } catch (DatabaseException e) {}
      return null;
    }

    /**
     * Yields the next record of this iterator.
     *
     * @return the next Record
     * @throws NoSuchElementException if there are no more Records to yield
     */
    public Record next() {
      /* TODO */
      if (hasNext()) {
        Record r = this.nextRecord;
        this.nextRecord = null;
        return r;
      }
      throw new NoSuchElementException();
    }

    public void remove() {
      throw new UnsupportedOperationException();
    }
  }
}
